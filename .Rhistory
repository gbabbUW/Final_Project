"Biological Sciences/Chemistry/Physics"=10, "Social Work"=11,
"Undergrad/undecided"=12, "Political Science/International Affairs"=13,
"Film"=14, "Fine Arts/Arts Administration"=15, "Languages"=16,
"Architecture"=17, "Other"=18), selected=1)
),
#We'll use this with a tabsetpanel in order to show graphs, reports, figures, etc
mainPanel(
plotOutput("plot")
)
)
)
mainPanel(
plotOutput("plot")
)
)
)
sidebarLayout(
#We'll use this as the control panel for user control
sidebarPanel(
selectInput("field.input", label = h3("Select Field"),
choices = list("Law"=1, "Math"=2, "Social Science, Psychologist"=3,
"Medical Science, Pharmaceuticals, and Bio Tech"=4, "Engineering"=5,
"English/Creative Writing/ Journalism"=6, "History/Religion/Philosophy"=7,
"Business/Econ/Finance"=8, "Education, Academia"=9,
"Biological Sciences/Chemistry/Physics"=10, "Social Work"=11,
"Undergrad/undecided"=12, "Political Science/International Affairs"=13,
"Film"=14, "Fine Arts/Arts Administration"=15, "Languages"=16,
"Architecture"=17, "Other"=18), selected=1)
),
mainPanel(
plotOutput("plot")
)
)
)
mainPanel(
plotOutput("plot")
)
)
)
#master UI code ends here--------------------
)
mainPanel(
plotOutput("plot")
)
)
)
mainPanel(
plotOutput("plot")
)
)
)
sidebarLayout(
#We'll use this as the control panel for user control
sidebarPanel(
selectInput("field.input", label=h3("Select Field"),
choices = list("Law"=1, "Math"=2, "Social Science, Psychologist"=3,
"Medical Science, Pharmaceuticals, and Bio Tech"=4, "Engineering"=5,
"English/Creative Writing/ Journalism"=6, "History/Religion/Philosophy"=7,
"Business/Econ/Finance"=8, "Education, Academia"=9,
"Biological Sciences/Chemistry/Physics"=10, "Social Work"=11,
"Undergrad/undecided"=12, "Political Science/International Affairs"=13,
"Film"=14, "Fine Arts/Arts Administration"=15, "Languages"=16,
"Architecture"=17, "Other"=18), selected=1)
),
#We'll use this with a tabsetpanel in order to show graphs, reports, figures, etc
mainPanel(
plotOutput("plot")
)
)
)
#master UI code ends here--------------------
#UI code ends here-------------------------------------------------------------------------------------
#Server code starts here, will be used by everybody so expect merge conflicts and keep it clean--------
dating.server <- function(input, output) {
filtered <- reactive({
data.new <- data %>%
filter(field_cd == input$field.input)
return(data.new)
})
output$plot <- renderPlot({
p <- ggplot(data = filtered(), mapping = aes(x = field_cd, y = match)) +
geom_point()+
labs (x = "Field") +
labs (y = "Matched (1(yes), 2(no))") +
labs (title = "                      Field in Relation to Matching")
return(p)
sidebarPanel(
selectInput("field.input", label=h3("Select Field"),
choices = list("Law"=1, "Math"=2, "Social Science, Psychologist"=3,
"Medical Science, Pharmaceuticals, and Bio Tech"=4, "Engineering"=5,
"English/Creative Writing/ Journalism"=6, "History/Religion/Philosophy"=7,
"Business/Econ/Finance"=8, "Education, Academia"=9,
"Biological Sciences/Chemistry/Physics"=10, "Social Work"=11,
"Undergrad/undecided"=12, "Political Science/International Affairs"=13,
"Film"=14, "Fine Arts/Arts Administration"=15, "Languages"=16,
"Architecture"=17, "Other"=18), selected=1)
),
#We'll use this with a tabsetpanel in order to show graphs, reports, figures, etc
mainPanel(
plotOutput("plot")
)
)
)
selectInput("field.input", label=h3("Select Field"),
choices = list("Law"=1, "Math"=2, "Social Science, Psychologist"=3,
"Medical Science, Pharmaceuticals, and Bio Tech"=4, "Engineering"=5,
"English/Creative Writing/ Journalism"=6, "History/Religion/Philosophy"=7,
"Business/Econ/Finance"=8, "Education, Academia"=9,
"Biological Sciences/Chemistry/Physics"=10, "Social Work"=11,
"Undergrad/undecided"=12, "Political Science/International Affairs"=13,
"Film"=14, "Fine Arts/Arts Administration"=15, "Languages"=16,
"Architecture"=17, "Other"=18), selected=1)
),
selectInput("field.input", label=h3("Select Field"),
choices = list("Law"=1, "Math"=2, "Social Science, Psychologist"=3,
"Medical Science, Pharmaceuticals, and Bio Tech"=4, "Engineering"=5,
"English/Creative Writing/ Journalism"=6, "History/Religion/Philosophy"=7,
"Business/Econ/Finance"=8, "Education, Academia"=9,
"Biological Sciences/Chemistry/Physics"=10, "Social Work"=11,
"Undergrad/undecided"=12, "Political Science/International Affairs"=13,
"Film"=14, "Fine Arts/Arts Administration"=15, "Languages"=16,
"Architecture"=17, "Other"=18), selected=1)
),
selectInput("field.input", label=h3("Select Field"),
choices = list("Law"=1, "Math"=2, "Social Science, Psychologist"=3,
"Medical Science, Pharmaceuticals, and Bio Tech"=4, "Engineering"=5,
"English/Creative Writing/ Journalism"=6, "History/Religion/Philosophy"=7,
"Business/Econ/Finance"=8, "Education, Academia"=9,
"Biological Sciences/Chemistry/Physics"=10, "Social Work"=11,
"Undergrad/undecided"=12, "Political Science/International Affairs"=13,
"Film"=14, "Fine Arts/Arts Administration"=15, "Languages"=16,
"Architecture"=17, "Other"=18), selected=1)
),
selectInput("field.input", label=h3("Select Field"),
choices = list("Law"=1, "Math"=2, "Social Science, Psychologist"=3,
"Medical Science, Pharmaceuticals, and Bio Tech"=4, "Engineering"=5,
"English/Creative Writing/ Journalism"=6, "History/Religion/Philosophy"=7,
"Business/Econ/Finance"=8, "Education, Academia"=9,
"Biological Sciences/Chemistry/Physics"=10, "Social Work"=11,
"Undergrad/undecided"=12, "Political Science/International Affairs"=13,
"Film"=14, "Fine Arts/Arts Administration"=15, "Languages"=16,
"Architecture"=17, "Other"=18), selected=1)
),
ating.server <- function(input, output) {
filtered <- reactive({
data.new <- data %>%
filter(field_cd == input$field.input)
return(data.new)
})
output$plot <- renderPlot({
p <- ggplot(data = filtered(), mapping = aes(x = field_cd, y = match)) +
geom_point()+
labs (x = "Field") +
labs (y = "Matched (1(yes), 2(no))") +
labs (title = "                      Field in Relation to Matching")
return(p)
})
output$plot <- renderPlot({
p <- ggplot(data = filtered(), mapping = aes(x = field_cd, y = match)) +
geom_point()+
labs (x = "Field") +
labs (y = "Matched (1(yes), 2(no))") +
labs (title = "                      Field in Relation to Matching")
return(p)
})
shinyApp(ui = dating.ui, server = dating.server)
library("ggplot2")
library("shiny")
library("dplyr")
data <- read.csv("data/Speed Dating Data.csv")
dating.ui <- fluidPage(
#master UI code starts here------------------
sidebarLayout(
#We'll use this as the control panel for user control
sidebarPanel(
selectInput("field.input", label=h3("Select Field"),
choices = list("Law"=1, "Math"=2, "Social Science, Psychologist"=3,
"Medical Science, Pharmaceuticals, and Bio Tech"=4, "Engineering"=5,
"English/Creative Writing/ Journalism"=6, "History/Religion/Philosophy"=7,
"Business/Econ/Finance"=8, "Education, Academia"=9,
"Biological Sciences/Chemistry/Physics"=10, "Social Work"=11,
"Undergrad/undecided"=12, "Political Science/International Affairs"=13,
"Film"=14, "Fine Arts/Arts Administration"=15, "Languages"=16,
"Architecture"=17, "Other"=18), selected=1)
),
#We'll use this with a tabsetpanel in order to show graphs, reports, figures, etc
mainPanel(
plotOutput("plot")
)
)
)
#Server code starts here, will be used by everybody so expect merge conflicts and keep it clean--------
dating.server <- function(input, output) {
filtered <- reactive({
data.new <- data %>%
filter(field_cd == input$field.input)
return(data.new)
})
output$plot <- renderPlot({
p <- ggplot(data = filtered(), mapping = aes(x = field_cd, y = match)) +
geom_point()+
labs (x = "Field") +
labs (y = "Matched (1(yes), 2(no))") +
labs (title = "                      Field in Relation to Matching")
return(p)
})
shinyApp(ui = dating.ui, server = dating.server)
data <- read.csv("data/Speed Dating Data.csv")
library("ggplot2")
library("shiny")
library("dplyr")
data <- read.csv("data/Speed Dating Data.csv")
library("ggplot2")
library("shiny")
library("dplyr")
data <- read.csv("data/Speed Dating Data.csv")
dating.ui <- fluidPage(
#master UI code starts here------------------
sidebarLayout(
#We'll use this as the control panel for user control
sidebarPanel(
selectInput("field.input", label=h3("Select Field"),
choices = list("Law"=1, "Math"=2, "Social Science, Psychologist"=3,
"Medical Science, Pharmaceuticals, and Bio Tech"=4, "Engineering"=5,
"English/Creative Writing/ Journalism"=6, "History/Religion/Philosophy"=7,
"Business/Econ/Finance"=8, "Education, Academia"=9,
"Biological Sciences/Chemistry/Physics"=10, "Social Work"=11,
"Undergrad/undecided"=12, "Political Science/International Affairs"=13,
"Film"=14, "Fine Arts/Arts Administration"=15, "Languages"=16,
"Architecture"=17, "Other"=18), selected=1)
),
#We'll use this with a tabsetpanel in order to show graphs, reports, figures, etc
mainPanel(
plotOutput("plot")
)
)
)
dating.server <- function(input, output) {
filtered <- reactive({
data.new <- data %>%
filter(field_cd == input$field.input)
return(data.new)
})
dating.server <- function(input, output) {
filtered <- reactive({
data.new <- data %>%
filter(field_cd == input$field.input)
return(data.new)
})
output$plot <- renderPlot({
p <- ggplot(data = filtered(), mapping = aes(x = field_cd, y = match)) +
geom_point()+
labs (x = "Field") +
labs (y = "Matched (1(yes), 2(no))") +
labs (title = "                      Field in Relation to Matching")
return(p)
})
shinyApp(ui = dating.ui, server = dating.server)
ibrary("ggplot2")
library("shiny")
library("dplyr")
#Creates dataframe containing all of the speed dating data, uncleaned
data <- read.csv("data/Speed Dating Data.csv")
#UI code starts here, will be used by everybody so expect merge conflicts and keep it clean------------
dating.ui <- fluidPage(
#master UI code starts here------------------
sidebarLayout(
#We'll use this as the control panel for user control
sidebarPanel(
selectInput("field.input", label=h3("Select Field"),
choices = list("Law"=1, "Math"=2, "Social Science, Psychologist"=3,
"Medical Science, Pharmaceuticals, and Bio Tech"=4, "Engineering"=5,
"English/Creative Writing/ Journalism"=6, "History/Religion/Philosophy"=7,
"Business/Econ/Finance"=8, "Education, Academia"=9,
"Biological Sciences/Chemistry/Physics"=10, "Social Work"=11,
"Undergrad/undecided"=12, "Political Science/International Affairs"=13,
"Film"=14, "Fine Arts/Arts Administration"=15, "Languages"=16,
"Architecture"=17, "Other"=18), selected=1)
),
#We'll use this with a tabsetpanel in order to show graphs, reports, figures, etc
mainPanel(
plotOutput("plot")
)
)
)
#master UI code ends here--------------------
#UI code ends here-------------------------------------------------------------------------------------
#Server code starts here, will be used by everybody so expect merge conflicts and keep it clean--------
dating.server <- function(input, output) {
filtered <- reactive({
data.new <- data %>%
filter(field_cd == input$field.input)
return(data.new)
})
output$plot <- renderPlot({
p <- ggplot(data = filtered(), mapping = aes(x = field_cd, y = match)) +
geom_point()+
labs (x = "Field") +
labs (y = "Matched (1(yes), 2(no))") +
labs (title = "                      Field in Relation to Matching")
return(p)
})
#master server code starts here------------------
#master server code ends here--------------------
}
#Server code ends here---------------------------------------------------------------------------------
shinyApp(ui = dating.ui, server = dating.server)
library("ggplot2")
library("shiny")
library("dplyr")
#Creates dataframe containing all of the speed dating data, uncleaned
data <- read.csv("data/Speed Dating Data.csv")
#UI code starts here, will be used by everybody so expect merge conflicts and keep it clean------------
dating.ui <- fluidPage(
#master UI code starts here------------------
sidebarLayout(
#We'll use this as the control panel for user control
sidebarPanel(
selectInput("field.input", label=h3("Select Field"),
choices = list("Law"=1, "Math"=2, "Social Science, Psychologist"=3,
"Medical Science, Pharmaceuticals, and Bio Tech"=4, "Engineering"=5,
"English/Creative Writing/ Journalism"=6, "History/Religion/Philosophy"=7,
"Business/Econ/Finance"=8, "Education, Academia"=9,
"Biological Sciences/Chemistry/Physics"=10, "Social Work"=11,
"Undergrad/undecided"=12, "Political Science/International Affairs"=13,
"Film"=14, "Fine Arts/Arts Administration"=15, "Languages"=16,
"Architecture"=17, "Other"=18), selected=1)
),
#We'll use this with a tabsetpanel in order to show graphs, reports, figures, etc
mainPanel(
plotOutput("plot")
)
)
)
#master UI code ends here--------------------
#UI code ends here-------------------------------------------------------------------------------------
#Server code starts here, will be used by everybody so expect merge conflicts and keep it clean--------
dating.server <- function(input, output) {
filtered <- reactive({
data.new <- data %>%
filter(field_cd == input$field.input)
return(data.new)
})
output$plot <- renderPlot({
p <- ggplot(data = filtered(), mapping = aes(x = field_cd, y = match)) +
geom_point()+
labs (x = "Field") +
labs (y = "Matched (1(yes), 2(no))") +
labs (title = "                      Field in Relation to Matching")
return(p)
})
#master server code starts here------------------
#master server code ends here--------------------
}
#Server code ends here---------------------------------------------------------------------------------
shinyApp(ui = dating.ui, server = dating.server)
library("ggplot2")
library("shiny")
library("dplyr")
data <- read.csv("data/Speed Dating Data.csv")
data <- read.csv("data/Speed Dating Data.csv")
dating.ui <- fluidPage(
#master UI code starts here------------------
sidebarLayout(
#We'll use this as the control panel for user control
sidebarPanel(
selectInput("field.input", label=h3("Select Field"),
choices = list("Law"=1, "Math"=2, "Social Science, Psychologist"=3,
"Medical Science, Pharmaceuticals, and Bio Tech"=4, "Engineering"=5,
"English/Creative Writing/ Journalism"=6, "History/Religion/Philosophy"=7,
"Business/Econ/Finance"=8, "Education, Academia"=9,
"Biological Sciences/Chemistry/Physics"=10, "Social Work"=11,
"Undergrad/undecided"=12, "Political Science/International Affairs"=13,
"Film"=14, "Fine Arts/Arts Administration"=15, "Languages"=16,
"Architecture"=17, "Other"=18), selected=1)
),
#We'll use this with a tabsetpanel in order to show graphs, reports, figures, etc
mainPanel(
plotOutput("plot")
)
)
)
dating.server <- function(input, output) {
filtered <- reactive({
data.new <- data %>%
filter(field_cd == input$field.input)
return(data.new)
})
output$plot <- renderPlot({
p <- ggplot(data = filtered(), mapping = aes(x = field_cd, y = match)) +
geom_point()+
labs (x = "Field") +
labs (y = "Matched (1(yes), 2(no))") +
labs (title = "                      Field in Relation to Matching")
return(p)
})
#master server code starts here------------------
#master server code ends here--------------------
}
library("ggplot2")
library("shiny")
library("dplyr")
data <- read.csv("data/Speed Dating Data.csv")
sidebarLayout(
#We'll use this as the control panel for user control
sidebarPanel(
selectInput("field.input", label=h3("Select Field"),
choices = list("Law"=1, "Math"=2, "Social Science, Psychologist"=3,
"Medical Science, Pharmaceuticals, and Bio Tech"=4, "Engineering"=5,
"English/Creative Writing/ Journalism"=6, "History/Religion/Philosophy"=7,
"Business/Econ/Finance"=8, "Education, Academia"=9,
"Biological Sciences/Chemistry/Physics"=10, "Social Work"=11,
"Undergrad/undecided"=12, "Political Science/International Affairs"=13,
"Film"=14, "Fine Arts/Arts Administration"=15, "Languages"=16,
"Architecture"=17, "Other"=18), selected=1)
),
#We'll use this with a tabsetpanel in order to show graphs, reports, figures, etc
mainPanel(
plotOutput("plot")
)
)
)
dating.ui <- fluidPage(
#master UI code starts here------------------
sidebarLayout(
#We'll use this as the control panel for user control
sidebarPanel(
selectInput("field.input", label=h3("Select Field"),
choices = list("Law"=1, "Math"=2, "Social Science, Psychologist"=3,
"Medical Science, Pharmaceuticals, and Bio Tech"=4, "Engineering"=5,
"English/Creative Writing/ Journalism"=6, "History/Religion/Philosophy"=7,
"Business/Econ/Finance"=8, "Education, Academia"=9,
"Biological Sciences/Chemistry/Physics"=10, "Social Work"=11,
"Undergrad/undecided"=12, "Political Science/International Affairs"=13,
"Film"=14, "Fine Arts/Arts Administration"=15, "Languages"=16,
"Architecture"=17, "Other"=18), selected=1)
),
#We'll use this with a tabsetpanel in order to show graphs, reports, figures, etc
mainPanel(
plotOutput("plot")
)
)
)
dating.server <- function(input, output) {
filtered <- reactive({
data.new <- data %>%
filter(field_cd == input$field.input)
return(data.new)
})
output$plot <- renderPlot({
p <- ggplot(data = filtered(), mapping = aes(x = field_cd, y = match)) +
geom_point()+
labs (x = "Field") +
labs (y = "Matched (1(yes), 2(no))") +
labs (title = "                      Field in Relation to Matching")
return(p)
})
dating.server <- function(input, output) {
filtered <- reactive({
data.new <- data %>%
filter(field_cd == input$field.input)
return(data.new)
})
output$plot <- renderPlot({
p <- ggplot(data = filtered(), mapping = aes(x = field_cd, y = match)) +
geom_point()+
labs (x = "Field") +
labs (y = "Matched (1(yes), 2(no))") +
labs (title = "                      Field in Relation to Matching")
return(p)
})
shinyApp(ui = dating.ui, server = dating.server)
library("shiny")
library("ggplot2")
library("dplyr")
data(iris)
# Range of sepal length and width
range.sepal.l <- range(iris$Sepal.Length)
range.sepal.w <- range(iris$Sepal.Width)
# Creates widgets to be used by the user in the application. Widgets include two sliders with range values for
# sepal length and width, a checkbox for which flowers to include, and a checkbox to flip the axis.
ui <- fluidPage(
titlePanel(h4(("Sepal and Petal, Widths and Lengths, of Different Species of Flowers "), align = "center")),
sidebarLayout(
sidebarPanel(
sliderInput('sepal.length', label="Sepal Length", min = range.sepal.l[1], max = range.sepal.l[2], value= range.sepal.l,
step = 0.1),
sliderInput('sepal.width', label="Sepal Width", min = range.sepal.w [1], max = range.sepal.w [2], value=range.sepal.w,
step = 0.1),
checkboxInput('flip.axis', label=strong("Flip Axis"), value=FALSE),
checkboxGroupInput("species.type", label=("Select Species"), choices =
list("setosa" = "setosa", "versicolor" = "versicolor", "virginica" = "virginica"),
selected = c("setosa", "versicolor", "virginica"))
),
# mainPanel initializes the tabs of the app, the table and plot descriptions, as well as the hover feature.
mainPanel(
tabsetPanel(
tabPanel("Table", uiOutput("text1"), dataTableOutput('table')),
tabPanel("Plot", uiOutput("text2"),
plotOutput('plot', hover = "plot_hover"),
verbatimTextOutput("info"))
)
)
)
)
shinyUI(ui)
setwd("~/Desktop/Final_Project")
setwd("~/Desktop")
library("shiny")
library("ggplot2")
library("dplyr")
data.stuff <- read.csv("dum/Speed Dating Data.csv")
